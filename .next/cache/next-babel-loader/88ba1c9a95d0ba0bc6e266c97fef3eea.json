{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport axios from 'axios';\nexport const Axios = axios.create({\n  baseURL: '/api'\n}); //import    {Axios,serverAxios} from './request'\n\nconst jueapi = 'https://extension-ms.juejin.im';\nexport const GET_LIST = 'INDEX/GET_GOLD_LIST';\nexport const GET_GIT_LIST = 'INDEX/GET_GIT_LIST';\nexport const changGoldList = list => ({\n  type: GET_LIST,\n  list\n});\nexport const changGitList = list => ({\n  type: GET_GIT_LIST,\n  list\n});\nexport const getGoldList = (param, isServer) => {\n  console.log('getGoldList-------'); //  const  HttpGet = server?serverAxios:Axios;\n\n  return (dispatch, getState) => {\n    //http://localhost:9090\n    let url = '/resources/gold';\n\n    if (isServer) {\n      url = jueapi + url;\n    }\n\n    return Axios.post(url, param).then(res => {\n      const {\n        data\n      } = res.data;\n      dispatch(changGoldList(data));\n      dispatch(changGoldList(data));\n    });\n  };\n};\nexport const getGitList = param => {\n  //  const  HttpGet = server?serverAxios:Axios;\n  return (dispatch, getState) => {\n    //http://localhost:9090\n    return Axios.get('/resources/github').then(res => {\n      const {\n        list\n      } = res.data;\n      dispatch(changeList(list));\n    });\n  };\n};\nconst exampleInitialState = {\n  lastUpdate: 0,\n  light: false,\n  count: 0,\n  GOLD_LIST: [],\n  GIT_LIST: [],\n  params_gold: {\n    category: \"frontend\",\n    limit: 30,\n    offset: 0,\n    order: \"time\"\n  },\n  params_git: {\n    \"category\": \"upcome\",\n    \"period\": \"day\",\n    \"lang\": \"javascript\",\n    \"offset\": 0,\n    \"limit\": 30\n  }\n};\nexport const actionTypes = {\n  TICK: 'TICK',\n  INCREMENT: 'INCREMENT',\n  DECREMENT: 'DECREMENT',\n  RESET: 'RESET',\n  CHANGE_GOLD: 'CHANGE_GOLD',\n  CHANGE_GIT: 'CHANGE_GIT'\n}; // REDUCERS\n\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.TICK:\n      return _Object$assign({}, state, {\n        lastUpdate: action.ts,\n        light: !!action.light\n      });\n\n    case actionTypes.INCREMENT:\n      return _Object$assign({}, state, {\n        count: state.count + 1\n      });\n\n    case actionTypes.DECREMENT:\n      return _Object$assign({}, state, {\n        count: state.count - 1\n      });\n\n    case actionTypes.RESET:\n      return _Object$assign({}, state, {\n        count: exampleInitialState.count\n      });\n\n    case GET_LIST:\n      return _Object$assign({}, state, {\n        GOLD_LIST: action.list\n      });\n\n    case GET_GIT_LIST:\n      return _Object$assign({}, state, {\n        GIT_LIST: action.list\n      });\n\n    case actionTypes.CHANGE_GOLD:\n      return _Object$assign({}, state, {\n        params_gold: action.params\n      });\n\n    case actionTypes.CHANGE_GIT:\n      return _Object$assign({}, state, {\n        params_git: action.params\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport const serverRenderClock = isServer => dispatch => {\n  return dispatch({\n    type: actionTypes.TICK,\n    light: !isServer,\n    ts: _Date$now()\n  });\n};\nexport const startClock = dispatch => {\n  return setInterval(() => {\n    // Dispatch `TICK` every 1 second\n    dispatch({\n      type: actionTypes.TICK,\n      light: true,\n      ts: _Date$now()\n    });\n  }, 1000);\n};\nexport const incrementCount = () => dispatch => {\n  return dispatch({\n    type: actionTypes.INCREMENT\n  });\n};\nexport const changeGold = param => dispatch => {\n  return dispatch({\n    type: actionTypes.CHANGE_GOLD,\n    param\n  });\n};\nexport const changeGit = param => dispatch => {\n  return dispatch({\n    type: actionTypes.CHANGE_GIT,\n    param\n  });\n};\nexport const decrementCount = () => dispatch => {\n  return setInterval(() => {\n    // Dispatch `TICK` every 1 second\n    dispatch({\n      type: actionTypes.DECREMENT\n    });\n  }, 5000);\n};\nexport const resetCount = () => dispatch => {\n  return dispatch({\n    type: actionTypes.RESET\n  });\n};\nexport function initializeStore(initialState = exampleInitialState) {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}","map":{"version":3,"sources":["D:/zcy/20198222/next-xitu/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","axios","Axios","create","baseURL","jueapi","GET_LIST","GET_GIT_LIST","changGoldList","list","type","changGitList","getGoldList","param","isServer","console","log","dispatch","getState","url","post","then","res","data","getGitList","get","changeList","exampleInitialState","lastUpdate","light","count","GOLD_LIST","GIT_LIST","params_gold","category","limit","offset","order","params_git","actionTypes","TICK","INCREMENT","DECREMENT","RESET","CHANGE_GOLD","CHANGE_GIT","reducer","state","action","ts","params","serverRenderClock","startClock","setInterval","incrementCount","changeGold","changeGit","decrementCount","resetCount","initializeStore","initialState"],"mappings":"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","sourcesContent":["import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport axios from 'axios'\r\nexport const Axios = axios.create({\r\n  baseURL: '/api',\r\n});\r\n//import    {Axios,serverAxios} from './request'\r\nconst jueapi ='https://extension-ms.juejin.im';\r\nexport const GET_LIST = 'INDEX/GET_GOLD_LIST'\r\nexport const GET_GIT_LIST = 'INDEX/GET_GIT_LIST'\r\nexport const changGoldList = list =>({\r\n  type:GET_LIST,\r\n  list\r\n})\r\nexport const changGitList= list =>({\r\n  type:GET_GIT_LIST,\r\n  list\r\n})\r\nexport const getGoldList = (param,isServer) =>{\r\n  console.log(\r\n    'getGoldList-------'\r\n  )\r\n  //  const  HttpGet = server?serverAxios:Axios;\r\n    return (dispatch,getState )=>{\r\n        //http://localhost:9090\r\n        let url = '/resources/gold'\r\n        if(isServer){\r\n          url=jueapi+url\r\n        }\r\n        return Axios.post(url,param)\r\n        .then(res=>{\r\n             const {data} = res.data\r\n             dispatch(changGoldList(data))\r\n             dispatch(changGoldList(data))\r\n        })\r\n    }\r\n}\r\nexport const getGitList = (param) =>{\r\n  //  const  HttpGet = server?serverAxios:Axios;\r\n    return (dispatch,getState )=>{\r\n        //http://localhost:9090\r\n        return Axios.get('/resources/github')\r\n        .then(res=>{\r\n             const {list} = res.data\r\n             dispatch(changeList(list))\r\n        })\r\n    }\r\n}\r\n\r\nconst exampleInitialState = {\r\n  lastUpdate: 0,\r\n  light: false,\r\n  count: 0,\r\n  GOLD_LIST:[],\r\n  GIT_LIST:[],\r\n  params_gold:{\r\n      category: \"frontend\",\r\n      limit: 30,\r\n      offset: 0,\r\n      order: \"time\" \r\n  },\r\n  params_git:{\r\n    \"category\":\"upcome\",\r\n    \"period\":\"day\",\r\n    \"lang\":\"javascript\",\r\n    \"offset\":0,\r\n    \"limit\":30\r\n }\r\n}\r\n\r\nexport const actionTypes = {\r\n  TICK: 'TICK',\r\n  INCREMENT: 'INCREMENT',\r\n  DECREMENT: 'DECREMENT',\r\n  RESET: 'RESET',\r\n  CHANGE_GOLD:'CHANGE_GOLD',\r\n  CHANGE_GIT:'CHANGE_GIT',\r\n}\r\n\r\n// REDUCERS\r\nexport const reducer = (state = exampleInitialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.TICK:\r\n      return Object.assign({}, state, {\r\n        lastUpdate: action.ts,\r\n        light: !!action.light\r\n      })\r\n    case actionTypes.INCREMENT:\r\n      return Object.assign({}, state, {\r\n        count: state.count + 1\r\n      })\r\n    case actionTypes.DECREMENT:\r\n      return Object.assign({}, state, {\r\n        count: state.count - 1\r\n      })\r\n    case actionTypes.RESET:\r\n      return Object.assign({}, state, {\r\n        count: exampleInitialState.count\r\n      })\r\n    case GET_LIST:\r\n      return Object.assign({}, state, {\r\n        GOLD_LIST: action.list\r\n      })\r\n    case GET_GIT_LIST:\r\n        return Object.assign({}, state, {\r\n          GIT_LIST: action.list\r\n        })\r\n    case actionTypes.CHANGE_GOLD:\r\n      return Object.assign({}, state, {\r\n        params_gold: action.params\r\n      })\r\n    case actionTypes.CHANGE_GIT:\r\n        return Object.assign({}, state, {\r\n          params_git: action.params\r\n        })\r\n    default:\r\n       return state\r\n  }\r\n}\r\n\r\n// ACTIONS\r\nexport const serverRenderClock = (isServer) => dispatch => {\r\n  return dispatch({ type: actionTypes.TICK, light: !isServer, ts: Date.now() })\r\n}\r\n\r\nexport const startClock = dispatch => {\r\n  return setInterval(() => {\r\n    // Dispatch `TICK` every 1 second\r\n    dispatch({ type: actionTypes.TICK, light: true, ts: Date.now() })\r\n  }, 1000)\r\n}\r\n\r\nexport const incrementCount = () => dispatch => {\r\n  return dispatch({ type: actionTypes.INCREMENT })\r\n}\r\nexport const changeGold = (param) => dispatch => {\r\n  return dispatch({ type: actionTypes.CHANGE_GOLD ,param})\r\n}\r\nexport const changeGit = (param) => dispatch => {\r\n  return dispatch({ type: actionTypes.CHANGE_GIT ,param})\r\n}\r\n\r\nexport const decrementCount = () => dispatch => {\r\n  return setInterval(() => {\r\n    // Dispatch `TICK` every 1 second\r\n    dispatch({ type: actionTypes.DECREMENT })\r\n  }, 5000) \r\n}\r\n\r\nexport const resetCount = () => dispatch => {\r\n  return dispatch({ type: actionTypes.RESET })\r\n}\r\n\r\nexport function initializeStore (initialState = exampleInitialState) {\r\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware )))\r\n}"]},"metadata":{},"sourceType":"module"}