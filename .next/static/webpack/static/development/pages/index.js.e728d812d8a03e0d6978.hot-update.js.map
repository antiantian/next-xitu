{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.e728d812d8a03e0d6978.hot-update.js","sources":["webpack:///./store.js"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport axios from 'axios'\r\nexport const Axios = axios.create({\r\n  baseURL: '/api',\r\n});\r\n//import    {Axios,serverAxios} from './request'\r\nconst jueapi ='https://extension-ms.juejin.im';\r\nexport const GET_LIST = 'INDEX/GET_GOLD_LIST'\r\nexport const GET_GIT_LIST = 'INDEX/GET_GIT_LIST'\r\nexport const changGoldList = list =>({\r\n  type:GET_LIST,\r\n  list\r\n})\r\nexport const changGitList= list =>({\r\n  type:GET_GIT_LIST,\r\n  list\r\n})\r\nexport const getGoldList = (param,isServer) =>{\r\n    return (dispatch,getState )=>{\r\n        let url = '/resources/gold'\r\n        if(isServer){\r\n          url=jueapi+url\r\n        }\r\n        return Axios.post(url,param)\r\n        .then(res=>{\r\n             const {data} = res.data\r\n             dispatch(changGoldList(data))\r\n             dispatch(changeGold(param))\r\n        })\r\n    }\r\n}\r\nexport const getGitList = (param) =>{\r\n    return (dispatch,getState )=>{\r\n      let url = '/resources/github'\r\n      if(isServer){\r\n        url=jueapi+url\r\n      }\r\n      return Axios.post(url,param)\r\n      .then(res=>{\r\n           const {data} = res.data\r\n           dispatch(changGitList(data))\r\n           dispatch(changeGit(param))\r\n      })\r\n    }\r\n}\r\n\r\nconst exampleInitialState = {\r\n  lastUpdate: 0,\r\n  light: false,\r\n  count: 0,\r\n  GOLD_LIST:[],\r\n  GIT_LIST:[],\r\n  params_gold:{\r\n      category: \"frontend\",\r\n      limit: 30,\r\n      offset: 0,\r\n      order: \"time\" \r\n  },\r\n  params_git:{\r\n    \"category\":\"upcome\",\r\n    \"period\":\"day\",\r\n    \"lang\":\"javascript\",\r\n    \"offset\":0,\r\n    \"limit\":30\r\n }\r\n}\r\n\r\nexport const actionTypes = {\r\n  TICK: 'TICK',\r\n  INCREMENT: 'INCREMENT',\r\n  DECREMENT: 'DECREMENT',\r\n  RESET: 'RESET',\r\n  CHANGE_GOLD:'CHANGE_GOLD',\r\n  CHANGE_GIT:'CHANGE_GIT',\r\n}\r\n\r\n// REDUCERS\r\nexport const reducer = (state = exampleInitialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.TICK:\r\n      return Object.assign({}, state, {\r\n        lastUpdate: action.ts,\r\n        light: !!action.light\r\n      })\r\n    case actionTypes.INCREMENT:\r\n      return Object.assign({}, state, {\r\n        count: state.count + 1\r\n      })\r\n    case actionTypes.DECREMENT:\r\n      return Object.assign({}, state, {\r\n        count: state.count - 1\r\n      })\r\n    case actionTypes.RESET:\r\n      return Object.assign({}, state, {\r\n        count: exampleInitialState.count\r\n      })\r\n    case GET_LIST:\r\n      return Object.assign({}, state, {\r\n        GOLD_LIST: action.list\r\n      })\r\n    case GET_GIT_LIST:\r\n        return Object.assign({}, state, {\r\n          GIT_LIST: action.list\r\n        })\r\n    case actionTypes.CHANGE_GOLD:\r\n      return Object.assign({}, state, {\r\n        params_gold: action.param\r\n      })\r\n    case actionTypes.CHANGE_GIT:\r\n        return Object.assign({}, state, {\r\n          params_git: action.param\r\n        })\r\n    default:\r\n       return state\r\n  }\r\n}\r\n\r\n// ACTIONS\r\nexport const serverRenderClock = (isServer) => dispatch => {\r\n  return dispatch({ type: actionTypes.TICK, light: !isServer, ts: Date.now() })\r\n}\r\n\r\nexport const startClock = dispatch => {\r\n  return setInterval(() => {\r\n    // Dispatch `TICK` every 1 second\r\n    dispatch({ type: actionTypes.TICK, light: true, ts: Date.now() })\r\n  }, 1000)\r\n}\r\n\r\nexport const incrementCount = () => dispatch => {\r\n  return dispatch({ type: actionTypes.INCREMENT })\r\n}\r\nexport const changeGold = (param) => dispatch => {\r\n  return dispatch({ type: actionTypes.CHANGE_GOLD ,param})\r\n}\r\nexport const changeGit = (param) => dispatch => {\r\n  return dispatch({ type: actionTypes.CHANGE_GIT ,param})\r\n}\r\n\r\nexport const decrementCount = () => dispatch => {\r\n  return setInterval(() => {\r\n    // Dispatch `TICK` every 1 second\r\n    dispatch({ type: actionTypes.DECREMENT })\r\n  }, 5000) \r\n}\r\n\r\nexport const resetCount = () => dispatch => {\r\n  return dispatch({ type: actionTypes.RESET })\r\n}\r\n\r\nexport function initializeStore (initialState = exampleInitialState) {\r\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware )))\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAZA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AAnCA;AAqCA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AACA;AACA;;;;A","sourceRoot":""}